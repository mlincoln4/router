#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, networks, asn):
    self.routes = []
    self.updates = {}
    self.revokes = {}
    self.aggregates = {}
    self.relations = {}
    self.sockets = {}
    self.asn = asn
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation
    
  def add_forwarding(self, packet):
    """ Add entry to forwarding table """
    self.routes.append({"network" : packet["msg"]["network"], "netmask" : packet["msg"]["netmask"], "peer" : packet["src"], "localpref" : packet["msg"]["localpref"],
    "selfOrigin" : packet["msg"]["selfOrigin"], "ASPath" : packet["msg"]["ASPath"], "origin" : packet["msg"]["origin"]})

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    outroutes = []
    dest_list = [int(x) for x in daddr.split('.')]
    for route in self.routes:
      network = route["network"]
      netmask = route["netmask"]
      mask_length = self.get_mask_length(netmask)
      masked_min = self.get_masked(network, netmask)
      masked_max = masked_min[:mask_length]
      masked_max += "1" * (32 - mask_length)
      masked_min = [int(x) for x in self.binary_to_ip(masked_min).split('.')]
      masked_max = [int(x) for x in self.binary_to_ip(masked_max).split('.')]
      for i in range(4):
        if masked_min[i] == masked_max[i]:
          if dest_list[i] != masked_min[i]:
            i = 0
            break
        elif dest_list[i] < masked_min[i] or dest_list[i] > masked_max[i]:
          i = 0
          break
      if i == 3:
        outroutes.append(route)
    out = outroutes
    if len(outroutes) > 1:
      longest_mask = 0
      out = []
      for i in range(len(outroutes)):
        route = outroutes[i]
        length = self.get_mask_length(route[netmask])
        if length > longest_mask:
          longest_mask = length
          out = []
          out.append(route)
        elif length == longest_mask:
          out.append(route)
    return out

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    best = float('inf')
    outroutes = []
    for route in routes:
      if len(route["ASPath"]) <= best:
        outroutes.append(route)
        best = len(route["ASPath"])
    return outroutes

  def get_highest_preference(self, routes):
    """ select the route with the highest localpref """
    highest_pref = 0
    outroutes = []
    for route in routes:
      if route["localpref"] >= highest_pref:
        outroutes.append(route)
        highest_pref = route["localpref"]
    return outroutes

  def get_self_origin(self, routes):
    """ select self originating routes """
    true_routes = []
    false_routes = []
    for route in routes:
      if route["selfOrigin"]:
        true_routes.append(route)
      else:
        false_routes.append(route)
    return false_routes if len(false_routes) == len(routes) else true_routes

  def get_origin_routes(self, routes):
    """ select origin routes: EGP > IGP > UNK """
    IGP = []
    EGP = []
    UNK = []
    for route in routes:
      if route["origin"] == "IGP":
        IGP.append(route)
      elif route["origin"] == "EGP":
        EGP.append(route)
      else:
        UNK.append(route)
    if IGP:
      return IGP
    elif EGP:
      return EGP
    else:
      return UNK

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []
    bgp_type = self.relations[srcif]
    for route in routes:
      if self.relations[route["peer"]] == "peer":
        if bgp_type == "cust":
          outroutes.append(route)
      elif self.relations[route["peer"]] == "prov":
        if bgp_type == "cust" or bgp_type == "prov":
          outroutes.append(route)
      else:
        outroutes.append(route)
    return outroutes

  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    peer = None
    routes = self.lookup_routes(daddr)
    # Rules go here
    if routes:
      # 1. Highest Preference
      if len(routes) > 1:
        routes = self.get_highest_preference(routes)
      # 2. Self Origin
      if len(routes) > 1:
        routes = self.get_self_origin(routes)
      # 3. Shortest ASPath
      if len(routes) > 1:
        routes = self.get_shortest_as_path(routes)
      # 4. EGP > IGP > UNK
      if len(routes) > 1:
        routes = self.get_origin_routes(routes)
      # 5. Lowest IP Address
      if len(routes) > 1:
        lowest_ip = [float('inf'), float('inf'), float('inf'), float('inf')]
        for i in range(len(routes)):
          ip = [int(x) for x in routes[i]["peer"].split('.')]
          for j in range(4):
            if ip[j] < lowest_ip[j]:
              lowest_ip[j] = ip[j]
        for route in routes:
          if route["peer"] == '.'.join([str(x) for x in lowest_ip]):
            routes = [route]
      if len(routes) >= 1:
        # Final check: enforce peering relationships
        routes = self.filter_relationships(srcif, routes)
      if routes:
        peer = routes[0]["peer"]
    return self.sockets[peer] if peer else None

  def forward(self, srcif, packet):
    """ Forward a data packet """
    sock = self.get_route(srcif, packet["dst"])
    if not sock:
      self.send_error(srcif, packet)
      return False
    sock.send(json.dumps(packet).encode())
    return True
  
  def get_masked(self, network, netmask):
      network_list = [format(int(x), '08b') for x in network.split('.')]
      netmask_list = [format(int(x), '08b') for x in netmask.split('.')]
      masked = ['', '', '', '']
      for i in range(4):
        for j in range(8):
          if network_list[i][j] == '1' and netmask_list[i][j] == '1':
            masked[i] += '1'
          else:
            masked[i] += '0'
      return ''.join(masked)
  
  def get_mask_length(self, netmask):
      netmask = netmask.split('.')
      netmask_list = [format(int(x), '08b') for x in netmask]
      netmask = ''.join(netmask_list)
      mask_length = netmask.count('1')
      return mask_length

  def binary_to_ip(self, binary):
    net_list = []
    entry = ""
    for i in range(32):
      entry += binary[i]
      if i % 8 == 7:
        net_list.append(str(int(entry, 2)))
        entry = ""
    return '.'.join(net_list)

  def same_attributes(self, route, other):
    return route["localpref"] == other["localpref"] and route["selfOrigin"] == other["selfOrigin"] and route["ASPath"] == other["ASPath"] and route["origin"] == other["origin"]

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    peer_routes = {}
    routes = self.routes
    for route in routes:
      if route["peer"] in peer_routes:
        peer_routes[route["peer"]].append(route)
      else:
        peer_routes[route["peer"]] = [route]
    for key in peer_routes:
      routes = peer_routes[key]
      for route in routes:
        mask_length = self.get_mask_length(route['netmask'])
        for other_route in routes:
          if other_route == route:
            continue
          other_mask_length = self.get_mask_length(other_route["netmask"])
          if other_mask_length == mask_length:
            mask = self.get_masked(route["network"], route["netmask"])
            other_mask = self.get_masked(other_route["network"], other_route["netmask"])
            same = True
            for i in range(mask_length - 1):
              if mask[i] != other_mask[i]:
                same = False
                break
            if same and self.same_attributes(route, other_route):
              if (mask[mask_length - 1] == '0'):
                new_net = mask
              else:
                new_net = other_mask
              new_net = self.binary_to_ip(new_net)
              self.routes.remove(route)
              self.routes.remove(other_route)
              # find list of aggregates for each of these routes and remove
              aggregates1 = self.aggregates.pop(route["network"] + "/" + str(mask_length) + ":" + key, []) + [route]
              aggregates2 = self.aggregates.pop(other_route["network"] + "/" + str(mask_length) + ":" + key, []) + [other_route]
              new_mask_length = mask_length - 1
              # update the list of aggregates to be the sum of the parts that were aggregated
              self.aggregates[new_net + "/" + str(new_mask_length) + ":" + key] = aggregates1 + aggregates2
              new_mask = '1' * new_mask_length + '0' * (32 - new_mask_length)
              new_mask = self.binary_to_ip(new_mask)
              route["network"] = new_net
              route["netmask"] = new_mask
              self.add_forwarding({"src" : key, "msg" : route})
    return False

  def update(self, srcif, packet):
    """ handle update packets """
    self.updates[packet["src"]] = packet
    self.add_forwarding(packet)
    self.coalesce()
    packet["msg"]["ASPath"].append(self.asn)
    for key in self.sockets:
      if key != srcif:
        packet["src"] = key[:-1] + "1"
        packet["dst"] = key
        relationship_to = self.relations[key]
        relationship_from = self.relations[srcif]
        if relationship_to == "cust" or relationship_from == "cust":
          self.sockets[key].send(json.dumps(packet).encode())
        else:
          return False
    return True

  def deaggregate(self, target, peer):
    for key in self.aggregates:
      if key.split(':')[1] != peer:
        continue
      if target in self.aggregates[key]:
        self.aggregates[key].remove(target)
        # return the list of the rest of routes that make up the aggregate and the network/netmask in the table
        return self.aggregates.pop(key), key.split(':')[0]
    return False, False

  def revoke(self, packet):
    """ handle revoke packets """
    peer = packet["src"]
    for route in packet["msg"]:
      for entry in self.routes:
        aggregates, network_netmask = self.deaggregate(route, peer)
        if aggregates:
          network = network_netmask.split('/')[0]
          netmask = network_netmask.split('/')[1]
          netmask = '1' * int(netmask) + '0' * (32 - int(netmask))
          netmask = self.binary_to_ip(netmask)
          if entry["network"] == network and entry["netmask"] == netmask and entry["peer"] == peer:
            self.routes.remove(entry)
            for agg_route in aggregates:
              self.add_forwarding({"src" : peer, "msg" : agg_route})
            self.coalesce()
        else:
          if entry["peer"] == peer and entry["network"] == route["network"] and entry["netmask"] == route["netmask"]:
            self.routes.remove(entry)
    self.coalesce()
    self.revokes[packet["src"]] = packet
    for key in self.sockets:
      if key != peer:
        packet["src"] = key[:-1] + "1"
        packet["dst"] = key
        relationship_to = self.relations[key]
        relationship_from = self.relations[peer]
        if relationship_to == "cust" or relationship_from == "cust":
          self.sockets[key].send(json.dumps(packet).encode())
        else:
          return False
    return True

  def dump(self, packet):
    """ handles dump table requests """
    packet["type"] = "table"
    src = packet["dst"]
    dst = packet["src"]
    packet["src"] = src
    packet["dst"] = dst
    packet["msg"] = self.routes
    self.sockets[dst].send(json.dumps(packet).encode())
    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    if packet["type"] == "update":
      self.update(srcif, packet)
    elif packet["type"] == "data":
      self.forward(srcif, packet)
    elif packet["type"] == "dump":
      self.dump(packet)
    elif packet["type"] == "revoke":
      self.revoke(packet)
    return True

  def send_error(self, srcif, msg):
    """ Send a no_route error message """
    msg["type"] = "no route"
    msg["msg"] = {}
    msg["dst"] = msg["src"]
    msg["src"] = srcif[:-1] + "1"
    self.sockets[srcif].send(json.dumps(msg).encode())
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          if not self.handle_packet(srcif, msg):
            self.send_error(srcif, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', metavar='asn', type=int, nargs='?', help="asn")
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.networks, ARGS.asn).run()