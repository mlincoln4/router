#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, networks, asn):
    self.routes = []
    self.updates = {}
    self.relations = {}
    self.sockets = {}
    self.asn = asn
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation
    
  def add_forwarding(self, packet):
    """ Add entry to forwarding table """
    self.routes.append({"network" : packet["msg"]["network"], "netmask" : packet["msg"]["netmask"], "peer" : packet["src"], "localpref" : packet["msg"]["localpref"],
    "selfOrigin" : packet["msg"]["selfOrigin"], "ASPath" : packet["msg"]["ASPath"], "origin" : packet["msg"]["origin"]})

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    outroutes = []
    dest_list = [int(x) for x in daddr.split('.')]
    for route in self.routes:
      network = route["network"]
      netmask = route["netmask"]
      network_list = [format(int(x), '08b') for x in network.split('.')]
      netmask_list = [format(int(x), '08b') for x in netmask.split('.')]
      masked_min = ['', '', '', '']
      for i in range(4):
        for j in range(8):
          if network_list[i][j] == '1' and netmask_list[i][j] == '1':
            masked_min[i] += '1'
          else:
            masked_min[i] += '0'
        masked_min[i] = int(masked_min[i], 2)
      masked_max = ['', '', '', '']
      for i in range(4):
        netmask = netmask_list[i]
        zeroes = netmask.count('0')
        binary = '1' * zeroes
        if binary != '':
          masked_max[i] = int(binary, 2)
        else:
          masked_max[i] = int(masked_min[i])
      for i in range(4):
        if masked_min[i] == masked_max[i]:
          if dest_list[i] != masked_min[i]:
            i = 0
            break
        elif dest_list[i] < masked_min[i] or dest_list[i] > masked_max[i]:
          i = 0
          break
      if i == 3:
        outroutes.append(route)
    if len(outroutes) > 1:
      longest_mask = 0
      for i in range(len(outroutes)):
        route = outroutes[i]
        netmask = route['netmask'].split('.')
        netmask_list = [format(int(x), '08b') for x in netmask]
        netmask = ''.join(netmask_list)
        length = netmask.count('1')
        if length >= longest_mask:
          longest_mask = length
        else:
          outroutes.pop(i)
    return outroutes

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    best = float('inf')
    outroutes = []
    for route in routes:
      if len(route["ASPath"]) <= best:
        outroutes.append(route)
        best = len(route["ASPath"])
    return outroutes

  def get_highest_preference(self, routes):
    """ select the route with the highest localpref """
    highest_pref = 0
    outroutes = []
    for route in routes:
      if route["localpref"] >= highest_pref:
        outroutes.append(route)
        highest_pref = route["localpref"]
    return outroutes

  def get_self_origin(self, routes):
    """ select self originating routes """
    true_routes = []
    false_routes = []
    for route in routes:
      if route["selfOrigin"]:
        true_routes.append(route)
      else:
        false_routes.append(route)
    return false_routes if len(false_routes) == len(routes) else true_routes

  def get_origin_routes(self, routes):
    """ select origin routes: EGP > IGP > UNK """
    IGP = []
    EGP = []
    UNK = []
    for route in routes:
      if route["origin"] == "IGP":
        IGP.append(route)
      elif route["origin"] == "EGP":
        EGP.append(route)
      else:
        UNK.append(route)
    if IGP:
      return IGP
    elif EGP:
      return EGP
    else:
      return UNK

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []
    bgp_type = self.relations[srcif]
    for route in routes:
      if self.relations[route["peer"]] == "peer":
        if bgp_type == "cust":
          outroutes.append(route)
      elif self.relations[route["peer"]] == "prov":
        if bgp_type == "cust" or bgp_type == "prov":
          outroutes.append(route)
      else:
        outroutes.append(route)
    return outroutes

  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    peer = None
    routes = self.lookup_routes(daddr)
    # Rules go here
    if routes:
      # 1. Highest Preference
      if len(routes) > 1:
        routes = self.get_highest_preference(routes)
      # 2. Self Origin
      if len(routes) > 1:
        routes = self.get_self_origin(routes)
      # 3. Shortest ASPath
      if len(routes) > 1:
        routes = self.get_shortest_as_path(routes)
      # 4. EGP > IGP > UNK
      if len(routes) > 1:
        routes = self.get_origin_routes(routes)
      # 5. Lowest IP Address
      if len(routes) > 1:
        lowest_ip = [int(x) for x in routes[0]["peer"].split('.')]
        for i in range(1, len(routes)):
          ip = [int(x) for x in routes[i]["peer"].split('.')]
          for j in range(4):
            if ip[j] < lowest_ip[j]:
              lowest_ip[j] = ip[j]
            else:
              routes.pop(i)
              i -= 1
              break
        for route in routes:
          if route["peer"] == '.'join([str(x) for x in lowest_ip])
      if len(routes) >= 1:
        # Final check: enforce peering relationships
        routes = self.filter_relationships(srcif, routes)
      if routes:
        peer = routes[0]["peer"]
    return self.sockets[peer] if peer else None

  def forward(self, srcif, packet):
    """ Forward a data packet """
    sock = self.get_route(srcif, packet["dst"])
    if not sock:
      self.send_error(srcif, packet)
      return False
    sock.send(json.dumps(packet).encode())
    return True

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False

  def update(self, srcif, packet):
    """ handle update packets """
    self.updates[packet["src"]] = packet
    self.add_forwarding(packet)
    packet["msg"]["ASPath"].append(self.asn)
    for key in self.sockets:
      if key != srcif:
        packet["src"] = key[:-1] + "1"
        packet["dst"] = key
        self.sockets[key].send(json.dumps(packet).encode())
    return

  def revoke(self, packet):
    """ handle revoke packets """
    # TODO
    return True

  def dump(self, packet):
    """ handles dump table requests """
    packet["type"] = "table"
    src = packet["dst"]
    dst = packet["src"]
    packet["src"] = src
    packet["dst"] = dst
    packet["msg"] = self.routes
    self.sockets[dst].send(json.dumps(packet).encode())
    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    if packet["type"] == "update":
      self.update(srcif, packet)
    elif packet["type"] == "data":
      self.forward(srcif, packet)
    elif packet["type"] == "dump":
      self.dump(packet)
    return True

  def send_error(self, srcif, msg):
    """ Send a no_route error message """
    msg["type"] = "no route"
    msg["msg"] = {}
    msg["dst"] = msg["src"]
    msg["src"] = srcif[:-1] + "1"
    self.sockets[srcif].send(json.dumps(msg).encode())
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          if not self.handle_packet(srcif, msg):
            self.send_error(srcif, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', metavar='asn', type=int, nargs='?', help="asn")
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.networks, ARGS.asn).run()
